/*******************************************************************************
 * Copyright (c) 2013 -- WPI Suite
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors: Team 5 D13
 * 
 ******************************************************************************/

package edu.wpi.cs.wpisuitetng.modules.requirementmanager.requirement.acceptancetest;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EtchedBorder;
import javax.swing.border.MatteBorder;

import com.lowagie.text.Font;

import edu.wpi.cs.wpisuitetng.modules.requirementmanager.models.AcceptanceTest;
import edu.wpi.cs.wpisuitetng.modules.requirementmanager.requirement.JTextFieldLimit;

/** This is a JPanel to display an individual acceptance test.
 * The "title" is generated by the acceptance test that is displayed in this panel.
 */
@SuppressWarnings({"serial","rawtypes", "unchecked", "unused"})
public class AcceptanceTestPanel extends JPanel{

	/** The label for the status combo box ("statusBox") */
	private  JLabel statusLabel; 

	//The fillable components
	/** The actual description component of the test to be displayed in this panel, stored in a JTextArea */
	private JTextArea txtDescription;
	
	/** The name text field */
	private  JTextField txtName;
	
	/** The status combo box */
	private  JComboBox statusBox;

	/** The generated title of this acceptance test (who added the acceptance test and when). This is generated by the acceptance test that is displayed in this panel. */
	private String title;
	
	/** The actual AcceptanceTest to be displayed in this AcceptanceTestPanel */
	private AcceptanceTest myTest;
	

	/** This is the constructor for this panel.
	 * It takes in the AcceptanceTest to be displayed in this panel by two of it's components:
	 * -The name of the acceptance test, passed in as "testName"
	 * -The description of the acceptance test, passed in as "testDescription"
	 * 
	 * @param testName A string containing the name of the acceptance test to be displayed in this panel
	 * @param testDescription A string containing the actual body (description) of the acceptance test to be displayed in this panel
	 * @param status An AcceptanceTestResult describing the status of the acceptance test to be displayed in this panel
	 */
	public AcceptanceTestPanel(String testName, String testDescription, AcceptanceTestResult status){
		myTest = new AcceptanceTest (testName, testDescription, status);//Actually create the AcceptanceTest 
		
		this.setBackground(Color.white);//Set the background color of this panel to white
		this.setOpaque(true);//Set this panel to Opaque (means the background is painted)

		//Create the label for the statusBox:
		statusLabel = new JLabel("Status: ");

		//Create and set the components:
		//Name:
		txtName = new JTextField(testName);
		txtName.setFont(txtName.getFont().deriveFont(11)); //set the font of the name to size 11
		txtName.setFont(txtName.getFont().deriveFont(Font.ITALIC)); //set the font of the name to bold and italic
		txtName.setBorder(null); // tell the txtName field to not paint a border
		txtName.setBackground(Color.WHITE);//set the background of the txtName to white
		txtName.setEditable(false);//make sure the name cannot be altered
		//end Name

		//Description:
		txtDescription = new JTextArea(testDescription,2,2);
		txtDescription.setLineWrap(true); //Make the description wrap long lines
		txtDescription.setFont(txtDescription.getFont().deriveFont(9)); //set the font of the description to size 9
		txtDescription.setEditable(false);//make sure the description cannot be altered
		txtDescription.setDocument(new JTextFieldLimit(100000));
		//end Description

		//Status box:
		String[] statusStrings = { " ", "Passed", "Failed"};//Create the strings for the status box
		statusBox = new JComboBox(statusStrings);//Construct the status box
		statusBox.setBackground(Color.white);//set the background of the statusBox to white
		switch (status) { //Set the initial selection for the status box appropriately
		case None:
			statusBox.setSelectedIndex(0);
			break;
		case Passed:
			statusBox.setSelectedIndex(1);
			break;
		case Failed:
			statusBox.setSelectedIndex(2);
			break;
		}
		//end Status box

		//Create an inner panel ("nameAndStatusPanel") to hold the name and status, add them to that panel
		/** An inner panel to hold the name and status of this AcceptanceTest */
		JPanel nameAndStatusPanel = new JPanel();
		nameAndStatusPanel.setBackground(Color.white);//set the background of the nameAndStatusPanel to be gray
		nameAndStatusPanel.setLayout(new BoxLayout(nameAndStatusPanel, BoxLayout.LINE_AXIS));//create and set the layout for the nameAndStatusPanel	
		nameAndStatusPanel.setBorder(  BorderFactory.createCompoundBorder( (BorderFactory.createMatteBorder(0, 0, 1, 0, Color.lightGray)),
																			(BorderFactory.createEmptyBorder(0, 0, 5, 0))  )  );//Set a compound matte border to underline the nameAndStatusPanel and space the underline 5 pixels bellow the components
		nameAndStatusPanel.add(txtName);//actually add the "txtName" JTextField to the nameAndStatusPanel
		nameAndStatusPanel.add(Box.createRigidArea(new Dimension(5,0)));//add 5 units of horizontal spacing after the txtName
		nameAndStatusPanel.add(statusLabel);//actually add the "statusLabel" JLabel to the nameAndStatusPanel
		nameAndStatusPanel.add(txtDescription);
		nameAndStatusPanel.add(statusBox);//actually add the "statusBox" JComboBox to the nameAndStatusPanel
		//end nameAndStatusPanel

		this.setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));//create and set the layout for this panel
		
		//Create a lowered etched border, add inner padding, add outer padding, and set the border of this panel to the result
		setBorder(BorderFactory.createCompoundBorder((BorderFactory.createEmptyBorder(5, 5, 5, 5)),
														BorderFactory.createCompoundBorder( (BorderFactory.createEtchedBorder(EtchedBorder.LOWERED)),																							(BorderFactory.createEmptyBorder(5, 5, 5, 5)) )  )   );
		//txtDescription.append(txt);
		//Add the components to this panel
		add(nameAndStatusPanel);//actually add the nameAndStatusPanel to this panel
		this.add(Box.createRigidArea(new Dimension(0,5)));//add 5 units of vertical spacing after the nameAndStatusPanel
		add(txtDescription);//actually add the  "content" JTextArea to this panel
		this.add(Box.createRigidArea(new Dimension(0,5)));//add 5 units of vertical spacing after the content

		this.setMaximumSize(new Dimension(100000, this.getPreferredSize().height));//Define a maximum height of the proper height to contain it's components
		
		//Add resize functionality to this panel to keep the maximum height current	
		 /** A reference to this AcceptanceTestPanel to use within the resize component listener */
		final JPanel referenceToThis = this;
		
		//Construct and add a new component listener to listen for a resize event on this panel
		this.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) { //on resize...
				referenceToThis.setMaximumSize(new Dimension(100000, referenceToThis.getPreferredSize().height));//reset the maximum height appropriately 
				referenceToThis.invalidate(); //send an invalidate to signal to the parent container that this panel must be repainted
				((ListOfAcceptanceTestPanel) referenceToThis.getParent()).resizeFunction();//call the resize function on the parent (an instance of ListOfAcceptanceTestPanel) to resize the scroll pane holding the list appropriately
			}
		});
		//end resize functionality
	}
	
	/** Sets up the listener for the "statusBox" JComboBox
	 */
	public void setup() {
		statusBox.addPopupMenuListener(new AcceptanceTestStatusListener(this));
	}

	/**
	 * @return txtDescription The "txtDescription" JTextArea
	 */
	public JTextArea gettxtDescription() {
		return txtDescription;
	}

	/**
	 * @param Description What to set the text of the "txtDescription" JTextArea to
	 */
	public void settxtDescription(String Description) {
		txtDescription.append(Description);
	}

	/**
	 * @return txtName The "txtName" JTextField
	 */
	public JTextField getTxtName() {
		return txtName;
	}

	/**
	 * @param txtName The "txtName" (an instance of JTextField) to set
	 */
	public void setTxtName(JTextField txtName) {
		this.txtName = txtName;
	}

	/**
	 * @return statusBox The "statusBox" JComboBox
	 */
	public JComboBox getStatusBox() {
		return statusBox;
	}

	/**
	 * @param statusBox The "statusBox" (an instance of JComboBox) to set
	 */
	public void setStatusBox(JComboBox statusBox) {
		this.statusBox = statusBox;
	}
	
	/** Gets the AcceptanceTest being displayed in this AcceptanceTestPanel
	 * @return myTest The AcceptanceTest being displayed in this AcceptanceTestPanel
	 */
	public AcceptanceTest getMyTest () {
		return myTest;
	}

}
